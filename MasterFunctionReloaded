function [] = MasterFunctionReloaded()
% This function calculates a new wing loading every time and uses the drag polar calculated drag for fuel burn and TS plots.
%% -------------------------- Initialization --------------------------
clc
close all
dt          = 1;                %weight convergence number
Surface_Fineness = 5;           % Adjusts linspace of Surface, lower numbers compute slower.
Plot_Graphs = 0;                %Turns plotting on and off

TS_Xmin     = 600;
TS_Xmax     = 1700;
%% ------------------ Global Variables for Functions ------------------
%all variables are in Enlish Units
%Declare global variables
global M Cruise_alt Sland taper sweep Range V_cruise S_Fuselage t_c_root e c_root Fl p_sl p_cruise T Clmin_cruise

AR = 10.5;                      % Aspect Ratio
%AR = linspace(9,13,35);        % we can loop through with different aspect ratios. 3 graphs per loop
Fl          = 91.914;           % Fuselage Length
Payload     = 2600;
S_Fuselage  = 2690;             % From CAD Model
t_c_root    = .11;              % Thickness to Chord Ratio at Root
taper       = .26;
sweep       = 30;
%Cruise Conditions
Clmax_to    = 1.667;
Clmax_land  = 2.044;
Clmax_cruise= 1;
Cl_cruise   = 0.61;
Clmin_cruise= -0.2;
M           =.85;               % cruise speed
Cruise_alt  = 55000;            % cruise alititude
Sland       = 4956;             % Landing runway length
Range       = 5200;             % [nmi]
sfc         = 0.6;              % specific fuel consumption

%% ----------------------- Initial Weight Guess -----------------------

MTOW_Guess = 70000;             % Takeoff Weight (lbs)


%% ------------------ Calculations ------------------

sweep = deg2rad(sweep);

num = 1;
BestOverallFuel = 999999999;
for arinc = 1:length(AR)
    [Fuel_weight(arinc),lift(arinc), Plane(arinc), DesignS(arinc), CD_out, CD_last] = TS(MTOW_Guess, AR(arinc), Clmax_land,num);
    num = num+3;
    
    if Fuel_weight(arinc) < BestOverallFuel
        BestOverallFuel = Fuel_weight(arinc);
        BestOverallAR = AR(arinc);
        BestOverallMTOW = Plane(arinc);
        BestOverallEmpty = Plane(arinc) - Fuel_weight(arinc);
        BestOverallS = DesignS(arinc);
        BestOverallCD0 = CD_out;
        BestOverallCD = CD_last;
    end
    
    if length(AR) > 1
        close all
    end
end

if length(AR) > 1

figure(1)
hold on
plot(AR,Plane,AR, Plane - Fuel_weight)
title('WEIGHTS')
legend('MTOW','EMPTY WEIGHT')

figure(2)
plot(AR, lift)
title('LOD')

figure(3)
plot(AR, DesignS)
title('Refrence Area')

figure(4)
plot(AR,Fuel_weight)
title('FUEL WEIGHT')

fprintf('--------------- CONCLUSIONS ---------------\n \n');

fprintf('Best Aspect Ratio: %f \n', BestOverallAR);
fprintf(' -Fuel Burn: %.1f lbs\n', BestOverallFuel);
fprintf(' -MTOW     : %.1f lbs\n', BestOverallMTOW);
fprintf(' -Empty Wt : %.1f lbs\n', BestOverallEmpty);
fprintf(' -Sref     : %.1f ft^2\n', BestOverallS);

fprintf('--------------- Stall ---------------\n \n');

V_worst_takeoff = sqrt((2*BestOverallMTOW)/(p_sl*BestOverallS*Clmax_to));
V_worst_landing = sqrt((2*BestOverallMTOW)/(p_sl*BestOverallS*Clmax_land));
V_nominal_landing = sqrt((2*(BestOverallEmpty+Payload+BestOverallFuel*200/5200))/(p_sl*BestOverallS*Clmax_land));
V_cruisestall = sqrt((2*BestOverallMTOW*.96)/(p_cruise*BestOverallS*Cl_cruise));

fprintf('Worst Case Takeoff %.1f ft/s       %.1f mph\n', V_worst_takeoff,V_worst_takeoff*.68)
fprintf('Worst Case Landing %.1f ft/s       %.1f mph\n', V_worst_landing,V_worst_landing*.68)
fprintf('Nominal Landing    %.1f ft/s       %.1f mph\n', V_nominal_landing,V_nominal_landing*.68)
fprintf('Worst Case Cruise  %.1f ft/s       %.1f mph\n', V_cruisestall,V_cruisestall*.68)

end
%% --------------------- Weight Estimate ---------------------
    function [ W0, W0S0 ] = WeightEstimate( S, T, AR, taper, sweep, M_ff, LOD)
    T               = T/2;    
        
    W0_guess        = 100000;
    converge        = 99999999;
    
    [SHT, SVT]      = stabilizers(S, AR);

    Mach_sea        = 0.2;    
    q               = .5*1.4*0.000364*Mach_sea^2;
    
    c_root          = 2*S/(sqrt(S*AR)*(1+taper));   
    
    HTail           = 5.5*SHT;          % Horizontal Tail Sref
    VTail           = 5.5*SVT;          % Vertical Tail Sref
    Fuse            = 5*S_Fuselage;     % Fuselage Swet
    %engine specs
    EDry            = 0.521*(T)^0.9;
    EOil            = 0.082*(T)^0.65;
    Erev            = 0.034*(T);
    EControl        = 0.26*(T)^0.5;
    EStart          = 9.33*(EDry/1000)^1.078;   
    Engine          = 2*(EDry+EOil+Erev+EControl+EStart)*1.4;
    
    N_z             = (1.5 * 2.5);      % Ultimate Load Factor

    M_ff(5)         = (exp(Range*6076/((V_cruise/(sfc/60/60))*(LOD))))^-1;

    M_fff           = 1-(M_ff(1)*M_ff(2)*M_ff(3)*M_ff(4)*M_ff(5)*M_ff(6)*M_ff(7)*M_ff(8)*M_ff(9));
    
    while converge > 0.1
        
        Fuel        = M_fff*W0_guess;

        LGear       = 0.043*W0_guess;
        AllElse     = 0.1*W0_guess;          
        
        %Raymber GA
        Wing        = 0.036*(S^0.758)*(Fuel^.0035).*(AR./(cos(sweep))^2).^0.6*(q^0.006)*(taper^.04)*(100*t_c_root/cos(sweep))^(-.3)*(N_z*W0_guess)^0.49;
        
        W0          = HTail+VTail+Fuse+Engine+Wing+LGear+AllElse+Fuel + Payload;
        
        converge    = abs(W0_guess-W0);
        
        W0_guess    = W0;
        W0S0        = W0_guess/S;
    end
%

    end
%% ------------------- Standard Atmosphere Function -------------------
    function [Density, Pressure, Temperature] = Standard_Atmosphere_IMPERIAL(altitude)
        
        altitude    = round(altitude/3.28084); % Converting ft to m
        tempK       = zeros(1,32001);
        pressureNM2 = zeros(1,32001);
        densityKGM3 = zeros(1,32001);
        pasttemp    = 288.15;
        press0      = 101325;
        
        for H = 1:11000
            nexttemp = pasttemp + (-6.5)/1000;
            tempK(H) = pasttemp;
            pasttemp = nexttemp;
        end
        
        for H = 11000:20000
            tempK(H) = pasttemp;
        end
        
        for H = 20000:32001
            nexttemp = pasttemp + (1)/1000;
            tempK(H) = pasttemp;
            pasttemp = nexttemp;
        end
               
        for H = 1:11000
            pressureNM2(H) = press0 * (288.15 /(tempK(H)))^((9.81 * 0.0289644)/(8.31432 * -0.0065));
        end
        
        for H = 11000:20000
            pressureNM2(H) = pressureNM2(11000) * exp(-9.81 * 0.0289644 * (H - 11000)/ (8.31432 * tempK(11000)));
        end
        
        for H = 20000:32001
            pressureNM2(H) = pressureNM2(20000) * (tempK(20000) /(tempK(H)))^((9.81 * 0.0289644)/(8.31432 * 0.001));
        end
        for H = 1:32000
            densityKGM3(H) = (0.0289644 * pressureNM2(H))/(8.31432 * tempK(H));
        end
        
        Density     = densityKGM3(altitude)*0.0019403203;   % density in slugs/ft^3
        Pressure    = pressureNM2(altitude)* 0.000145038;   % pressure in psi
        Temperature = tempK(altitude)* 1.8;                 % temperature in R

    end
%% --------------------- TW WS, Polar Plots, T-S ---------------------
    function [Fuelmin, DesignLOD,Design_MTOW, DesignS, CD0,CD_last] = TS(MTOW, AR, Clmax_land,fig_num)
%% ------------------------------ TW WS ------------------------------
        fprintf('--------------- AR %f ---------------\n \n',AR);

        %naming of picture file
        AR_text = strcat(' AR = ', num2str(AR));
        % Math Zone
        [p_cruise, ~, Temp]     = Standard_Atmosphere_IMPERIAL(Cruise_alt);
        V_cruise                = M * sqrt(1.4*1716*Temp);          % ft/s
        p_sl                    = Standard_Atmosphere_IMPERIAL(2);  %air density at sea level (slugs) code wont work at 0 for some reason
        M_ff                    = [0.99   0.995 0.995   0.98  0.692  0.9753 0.99    0.9606      0.992];
        WS                      = (0:350/1000:350);
        ws_1                    = 80;
        Sa                      = 800;
%% ------------------------------- TS -------------------------------
        %CD for climb 1,2,3,4,5,6, cruise
        
        Tnew    = 17745*2; %thrust of our engines
        
        Surface = TS_Xmin:Surface_Fineness:TS_Xmax;
        
        Thrust  = ones(1,length(Surface));
        %Climbs
        [rho, ~, ~] = Standard_Atmosphere_IMPERIAL(66); % Takeoff air density (slugs)
        for n = 1:7
            for i = 1:length(Surface)
                Swing = Surface(i);
                [~,~,~,~,~,ClimbCoe] = Constraints(Swing,AR,rho);
                [LOD, ~,~] = Drag_Polars(Swing,AR);
                                
                converge = 0;
                Thrust(i) = Tnew;
                while converge == 0
                    [W0, ~] = WeightEstimate(Swing,Thrust(i),AR, taper, sweep, M_ff, LOD(n));
                    TWnew = ClimbCoe(n);
                    Tnew = TWnew.*W0;
                    if abs(Thrust(i)-Tnew) < dt
                        converge = 1;
                    else
                        Thrust(i) = Tnew;
                    end
                end
            end
            C(n,:)= Thrust;
        end
        
       fprintf('TS CLIMB      - COMPLETE \n');
        
        %Cruise
        [p,~,~] = Standard_Atmosphere_IMPERIAL(55000); % Takeoff air density (slugs)
        Cr      = ones(1,length(Surface));
        for i = 1:length(Surface)
            Tnew = 17745*2;
            Swing = Surface(i);
            [~,~,~,TWWS,~,~] = Constraints(Swing,AR,p);
            [LOD, ~,~] = Drag_Polars(Swing,AR);
                
            converge = 0;
            Cr(i) = Tnew;
            while converge == 0
                [W0, W0S0] = WeightEstimate(Swing,Cr(i),AR, taper, sweep, M_ff, LOD(7));
                xold = 1000;
                for j = 1:length(WS)
                    x = abs(WS(j)-W0S0);
                    if abs(xold - x) > 1
                        TWnew = TWWS(2,j);
                       
                    end
                end
                Tnew = TWnew.*W0;
                
                if abs(Cr(i)-Tnew) < dt
                    converge = 1;
                else
                    Cr(i) = Tnew;
                end
            end
        end
        
        fprintf('TS CRUISE     - COMPLETE \n');
        
        % Takeoff
        [p,~,~] = Standard_Atmosphere_IMPERIAL(66); % Takeoff air density (slugs)
        To      = ones(1,length(Surface));
        for i = 1:length(Surface)
            Tnew  = 17745*2;
            Swing = Surface(i);
            [~,~,~,TWWS,~,~] = Constraints(Swing,AR,p);
            [LOD, ~,~]       = Drag_Polars(Swing,AR);
  
            converge = 0;
            To(i)    = Tnew;
            while converge == 0
                [W0, W0S0] = WeightEstimate(Swing,To(i),AR, taper, sweep, M_ff, LOD(2));
                xold  = 1000;
                for j = 1:length(WS)
                    x = abs(WS(j)-W0S0);
                    if xold > x
                        TWnew = TWWS(1,j);
                        xold  = x;
                    end
                end
                Tnew = TWnew.*W0;
                
                if abs(To(i)-Tnew) < dt
                    converge = 1;
                else
                    To(i) = Tnew;
                end
            end
        end        
        
        Thrust  = linspace(100,70000,1001);
        Sur     = ones(1,length(Thrust));
        
        fprintf('TS TAKEOFF    - COMPLETE \n');
        
        % Landing
        [p,~,~] = Standard_Atmosphere_IMPERIAL(66); % Takeoff air density (slugs)
        Snew    = MTOW / ws_1;
        for i = 1:length(Thrust)
            T = Thrust(i);
            converge = 0;
            Sur(i) = Snew;
            while converge == 0
                [LOD,~,~]       = Drag_Polars(Sur(i),AR);
                [W0, ~]         = WeightEstimate(Sur(i),T,AR, taper, sweep, M_ff,LOD(6));
                [~,~,~,~,ws,~]  = Constraints(Sur(i),AR,p);
                Snew            = W0./ws; 
                if abs(Sur(i)-Snew) < dt
                    converge    = 1;
                else
                    Sur(i)      = Snew;
                end
            end
        end
        fprintf('TS LAND       - COMPLETE \n');
        
        Tlan = Thrust;
        Slan = Sur;
        
        figure(fig_num)
        set(gcf, 'Position', get(0, 'Screensize'));
        hold on
        
        if Plot_Graphs == 1
        
        axis([TS_Xmin,TS_Xmax, 5000, 50000])
        
        Slan(1,1001:2001) = linspace(max(Slan),10000000,1001);
        Tlan(1,1001:2001) = max(Tlan);
        
        area(Slan, Tlan, .5, 'EdgeColor', 'none', 'FaceColor', [.8 .9 1]);
        area(Surface, max(C(3,:),To), .5, 'EdgeColor', 'none', 'FaceColor', [1,1,1]);
        legend('AutoUpdate', 'off')
        plot(Surface,C,Surface,Cr,'r',Slan,Tlan,'k',Surface,To,'m','LineWidth',1)
        legend('Feasible', 'Not Feasible','Climb 1', 'Climb 2', 'Climb 3', 'Climb 4', 'Climb 5', 'Climb 6', 'Ceiling', 'Cruise', 'Landing', 'Takeoff', 'AutoUpdate', 'off')
        xlabel('S [ft^2]', 'fontsize', 18)
        ylabel('T [lb]', 'fontsize', 18)
        title(['AR = ',num2str(AR)])
        scatter(1137,30753) % G550
        scatter(1017,32000) % PDR
        
        end
        
        FuelWeight = ones(length(Surface),length(Surface));
        
        T_ = linspace(5000,50000,length(FuelWeight));
        S = linspace(TS_Xmin,TS_Xmax,length(FuelWeight));
        for i = 1:length(Surface)
            for j = 1:length(Surface)
                
            S_loop = S(i);
            [LOD, ~] = Drag_Polars(S_loop,AR);
            T_loop = T_(j);
            [W0_loop, ~] = WeightEstimate(S_loop,T_loop,AR, taper, sweep, M_ff,LOD(3));
            %Wetted area of fuselage, wing, HTail, VTail 
            M_ff(5) = (exp(Range*6076/((V_cruise/(sfc/60/60))*(LOD(3)))))^-1;
            M_fff = 1-(M_ff(1)*M_ff(2)*M_ff(3)*M_ff(4)*M_ff(5)*M_ff(6)*M_ff(7)*M_ff(8)*M_ff(9));
                
            FuelWeight(i,j) = M_fff * W0_loop;
            end
            
        end
       
        v = [17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]*1000;
        
        if Plot_Graphs == 1
            contour(S,T_,FuelWeight',v,'ShowText','on')
        end
        
         Fuelmin = 9999999;
         
         for ii = 1:length(Surface)
     
             S_loop     = Surface(ii);
             [LOD, ~,~] = Drag_Polars(S_loop,AR);
             T_loop     = round(max(To(ii),max(C(:,ii))));
             [W0_loop, ~] = WeightEstimate(S_loop,T_loop,AR, taper, sweep, M_ff,LOD(3));                    
             M_ff(5)    = (exp(Range*6076/((V_cruise/(sfc/60/60))*(LOD(3)))))^-1;
             M_fff      = 1-(M_ff(1)*M_ff(2)*M_ff(3)*M_ff(4)*M_ff(5)*M_ff(6)*M_ff(7)*M_ff(8)*M_ff(9));
             
             FuelWeight1 = M_fff * W0_loop;
 
             if FuelWeight1 < Fuelmin
                 Fuelmin        = FuelWeight1;
                 Design_MTOW    = W0_loop;
                 DesignLOD      = LOD(3);
                 DesignS        = S_loop;
                 [~, CD0_out,CD] = Drag_Polars(S_loop,AR);
                 CD0            = CD0_out;
                 CD_last        = CD;
                 Fuelminii      = ii;
             end
         end
         
         fprintf('Design MTOW %f lbs \n', Design_MTOW);
         fprintf('Fuel Weight %f lbs \n', Fuelmin);
         fprintf('Empty Weight %f lbs \n \n', (Design_MTOW - Fuelmin));
         fprintf('Thrust %f lbs \n', max(To(ii),max(C(:,ii))));
         fprintf('Design LOD %f lbs \n', DesignLOD);
         fprintf('Refrence Area %f ft^2 \n \n', DesignS);
         
        
        Sland_final = 80 * (Design_MTOW - Fuelmin)/ DesignS * (1/((0.0024/p_sl)*Clmax_land)) + Sa;
        
        fprintf('Landing Length: %f ft \n \n', Sland_final);
        
        if Plot_Graphs == 1        
                plot(Surface(Fuelminii),max(To(Fuelminii),max(C(:,Fuelminii))), 'k+', 'LineWidth', 2);
                text(Surface(Fuelminii)+25, max(To(Fuelminii),max(C(:,Fuelminii)))-500, 'Design Point');
                set(gca,'XTick',200:200:TS_Xmax)
                set(gca,'XTickLabel',200:200:TS_Xmax)

                text1 = strcat('TSplot',AR_text,'.png');
                saveas(figure(fig_num),text1) 
        end
    end

%% Constraint Line Function
    function [c,index,Climb,TWWS,ws,ClimbCoe] = Constraints(Sref,AR,rho)
        [L0D, CD0,~] = Drag_Polars(Sref,AR);
        vector = ones(1,1001); % Makes somthing a 1001 long vector.
        %minimum G for flight, vertical distance/horizontal
        G =  [1.3,   .1,  2.5,  1.3,  3.3,  2.2]/100;
        eclean = 1.78*(1-0.045*AR^0.68)-0.64;
        e =  [eclean-0.05, eclean-0.05, eclean, eclean, eclean-0.1, eclean-0.1];
        %      1              2            3       4        5            6       <- Climb #
        Const = pi*AR.*e;
        CL = [Clmax_to, Clmax_to, Cl_cruise, Cl_cruise, Clmax_land, Clmax_land*.85];
        
        %initialize
        WS = (0:350/1000:350);
        M_ff = [0.99   0.995 0.995   0.98  0.692  0.9753 0.99    0.9606      0.992];
        M_ff(5) = (exp(Range*6076/((V_cruise/(sfc/60/60))*(L0D(3)))))^-1;
        landing_ratio =  M_ff(1)*M_ff(2)*M_ff(3)*M_ff(4)*M_ff(5)*M_ff(7)*M_ff(9);
        %       Warmup Taxi  Takeoff Climb Cruise Loiter Descent Alternative Landing
        
        % Landing field Length
        Sa = 800; % intermediate value between airliners and general aviation
        Landing = (((rho./p_sl).*Clmax_land)./(80*landing_ratio)).*(Sland*.6 - Sa).*vector;
        
        % Takeoff
        TOP = Sland/37.5;
        Takeoff = WS./((rho./p_sl).*Clmax_to.*TOP);
        % CLimb
        Climb =1./(CL).*CD0'+CL./(Const)+G;
        Climb = Climb .* ones(1001,1);
       
        Cor(1) =(1/.8)*(2);
        Cor(2) =(1/.8)*(2);
        Cor(3) =(1/.8)*(2);
        Cor(4) =(1/.8)*(1/.94)*(2);
        Cor(5) =(1/.8)*(landing_ratio/1);
        Cor(6) =(1/.8)*(landing_ratio/1)*(2);     
        
        TWConvert = [M_ff(1)*M_ff(2)                   %1
            M_ff(1)*M_ff(2)                            %2
            M_ff(1)*M_ff(2)                            %3
            M_ff(1)*M_ff(2)*M_ff(3)*M_ff(4)            %4
            M_ff(1)*M_ff(2)*M_ff(3)*M_ff(4)*M_ff(5)    %5
            M_ff(1)*M_ff(2)*M_ff(3)*M_ff(4)*M_ff(5)]'; %6
        
        Climb = Climb .* Cor .* TWConvert;
        
        % Ceiling
        Ceiling = 2*sqrt(CD0(4)/(pi*AR*e(4))) .* vector;
        
        % Cruise
        q = (1/2)*p_cruise*V_cruise^2;
        Cruise = (q.*CD0(4)./WS) + WS.*(1./(q.*pi.*AR.*e(4)));
        
        [c, index] = min(abs(Climb(1,6) - Takeoff));
        Climb = Climb';
        TWWS = [Takeoff;Cruise];
        ws = Landing(1,1);
        ClimbCoe = [Climb(1,1), Climb(2,1), Climb(3,1), Climb(4,1), Climb(5,1), Climb(6,1), Ceiling(1)];
    end
%% LOD Function
    function [LoD, CD0, CD] = Drag_Polars(Sref,AR) 
        [SHT, SVT] = stabilizers(Sref, AR);
        
        c_root  = 2.*Sref./(sqrt(Sref.*AR).*(1+taper));
        MAC     = (2/3)*c_root*(1+taper + taper^2)/(1+taper);
        VAR     = 0.9;
        HAR     = 4.0;
        HTPR    = 0.7;
        VTPR    = 0.5;
        v_span  = sqrt(SVT*VAR);
        h_span  = sqrt(SHT*HAR);
        v_croot = 2*SVT/(v_span*(1+VTPR));
        h_croot = 2*SHT/(h_span*(1+HTPR));
        V_MAC   = v_croot*(2/3)*(1+VTPR+VTPR^2)/(1+VTPR);
        H_MAC   = h_croot*(2/3)*(1+HTPR+HTPR^2)/(1+HTPR);
        
        % Raymr for a business jet         
        % Variables
        % Component order
        % Wing, VTail, HTail, Fuselage, Nacelle
        % length
        l       = [MAC, V_MAC, H_MAC, Fl, 14.16];
        % Thickness
        t       = [t_c_root*c_root, 2.043, 1.33, 9.59, 6.2125];
        % Chord wise location of max airfoil thickness
        xc      = [.11*MAC, .12*V_MAC, .12*H_MAC];
        % Wetted Areas
        St      = 184.21; % Nacelle Wetted Area
        % Changing with Sref input
        Swetc   = [2*Sref, 2*SVT, 2*SHT, S_Fuselage-2*St, 2*St];
        % Component Sweep
        Lm      = [sweep, .92153, .70685];
        % Temperature Rankine
        Temp    = 518.477;
        % Speed of Sound
        a       = sqrt(1.4*1716*Temp);
        % Takeoff/ Landing Mach Number
        Mto     = 0.12;
        Mland   = 0.14;
        % Takeoff/ Landing Velocity
        V       = [Mto*a, Mland*a];                                      
        % Flap cord percent
        cfc     = 0.17;
        % Flap deflection (deg)
        df      = 20;
        % Flapped area percent
        Af      = .75;
        
        % CD0 Drag = CDparasite + CDmisc + CDLP
        % Component Reynolds number (Transonic)
        rho     = 23.77*10^-4;
        rho2    = 2.7*10^-4;
        mu      = 3.737*10^-7;
        mu_cr   = 2.969e-7;
        ReTo    = rho.*V(1).*l./mu; % Takeoff Reynolds
        ReCr    = V_cruise*rho2/mu_cr.*l;
        ReLa    = rho.*V(2).*l./mu; % Landing Reynolds

        % Parasite Drag
        % Laminar
        Cf_laminarTo   = 1.328./sqrt(ReTo);
        Cf_laminarCr   = 1.328./sqrt(ReCr);
        Cf_laminarLa   = 1.328./sqrt(ReLa);
        % Turbulent
        Mto = V(1)/a;
        Mla = V(2)/a;
        Cf_turbulentTo = 0.455./((log10(ReTo)).^2.58.*(1+0.144.*Mto.^2).^0.65);
        Cf_turbulentCr = 0.455./((log10(ReCr)).^2.58.*(1+0.144.*M.^2).^0.65);
        Cf_turbulentLa = 0.455./((log10(ReLa)).^2.58.*(1+0.144.*Mla.^2).^0.65);
        % Average of Laminar and turbulent
        Cfc_avg        = [(Cf_laminarTo*0 + Cf_turbulentTo*1);
                        (Cf_laminarCr*0 + Cf_turbulentCr*1);
                        (Cf_laminarLa*0 + Cf_turbulentLa*1)];

        % Component Form Factors
        % Wing, VTail, HTail
        tc       = t(1:3)/l(1:3);
        FFcompTo = (1 + 0.6./xc.*(tc) + 100.*(tc).^4).*(1.34*Mto^0.18*cos(Lm).^0.28);
        FFcompCr = (1 + 0.6./xc.*(tc) + 100.*(tc).^4).*(1.34*M^0.18*cos(Lm).^0.28);
        FFcompLa = (1 + 0.6./xc.*(tc) + 100.*(tc).^4).*(1.34*Mla^0.18*cos(Lm).^0.28);
        % length/thickness for fuselage and nacelle
        f_fuse   = l(4)/t(4);
        f_nace   = l(5)/t(5);
        % Fuselage
        FFfuse   = (1 + 60/f_fuse^3 + f_fuse/400);
        % Nacelle
        FFnace   = 1 + 0.35/f_nace;

        FFc      = [FFcompTo, FFfuse, FFnace;
                FFcompCr, FFfuse, FFnace;
                FFcompLa, FFfuse, FFnace];

        % Interference Factor
        % [Ranges based on fillet(1.1-1.4),
        Qc      = [1.1, 1.06, 1.06, 1, 1.3];

        Ncomp   = Cfc_avg.*FFc.*[Qc;Qc;Qc].*[Swetc;Swetc;Swetc];
        CD_para = sum(Ncomp,2)/Sref; 
        % Miscellaneous Drag (Landing Gear, Flaps)
        % Landing Gear;
        DqA     = [0.25 0.15 0.18 0.13 0.05 0.3 1.4 1];
        % Landing gear frontal areas
        LA      = [2.67 2.67 0 0 0 0 0 0];
        Dqc     = DqA.*LA;
        CD_landgear = 2*1/Sref*(sum(Dqc));
        % Flaps
        CD_flaps = 1.7*(cfc)^1.38*(Af)*(sind(df))^2;

        % Leakages and Proturbances Drag
        % 2 - 5 % of parasite drag
        CD_LP   = CD_para*0.035;

        CD0     = [CD_para(1) + CD_landgear + CD_flaps + CD_LP(1);
            CD_para(1) + CD_flaps + CD_LP(1);
            CD_para(2) + CD_LP(2);
            CD_para(3) + CD_landgear + CD_flaps + CD_LP(3);
            CD_para(3) + CD_flaps + CD_LP(3)];
        
        
        CL = [linspace(-Clmax_to, Clmax_to, 100);
            linspace(-Clmax_to, Clmax_to, 100);
            linspace(Clmin_cruise, Clmax_cruise, 100);
            linspace(-Clmax_land, Clmax_land, 100);
            linspace(-Clmax_land, Clmax_land, 100)];
        
        % CDwave 
        CLmindrag   = 0.2;                                    % from Xfoil
        CLmins      = CLmindrag*[1;1;1;1;1];
        CLmin       = CLmins.*ones(size(CL));  

        eclean      = 1.78*(1-0.045*AR^0.68)-0.64;
        e           =  [eclean-0.05, eclean-0.05, eclean, eclean, eclean-0.1, eclean-0.1];
        
        MDD         = (.95/cos(sweep)) - (t_c_root/(cos(sweep))^2) - ( (Cl_cruise) ./ (10*(cos(sweep))^3 ));
        Mcrit       = MDD - (.1/80)^(1/3);
        CDwave      = 20*(M-Mcrit).^4;      
        
        CD = [CD0(1) + (CL(1,:)-CLmin(1,:)).^2./(pi.*AR().*e(1));
              CD0(2) + (CL(2,:)-CLmin(2,:)).^2./(pi.*AR.*e(2));
              CD0(3) + CDwave + (CL(3,:)-CLmin(3,:)).^2./(pi.*AR.*e(3));
              CD0(4) + (CL(4,:)-CLmin(4,:)).^2./(pi.*AR.*e(5));
              CD0(5) + (CL(5,:)-CLmin(5,:)).^2./(pi.*AR.*e(6))];
          
          
         
    %max LOD for each climb.. 1,2,3,4,5,6,cruise
    CD0(1) = CD0(1);
    CD0(2) = CD0(2);
    CD0(3) = CD0(3);
    CD0(4) = CD0(3);
    CD0(5) = CD0(4);
    CD0(6) = CD0(5);
    
        LoD(1) = max(CL(1,:)./CD(1,:));
        LoD(2) = max(CL(2,:)./CD(2,:));
        LoD(3) = max(CL(3,:)./(CD(3,:)));
        LoD(4) = max(CL(3,:)./CD(3,:));
        LoD(5) = max(CL(4,:)./CD(4,:));
        LoD(6) = max(CL(5,:)./CD(5,:));
        LoD(7) = max(CL(3,:)./CD(3,:));
    end
%%
function [SHT, SVT] = stabilizers(SW, AR)
%in between jet transport and general aviation twin engine

cw = 2*SW/(sqrt(SW*AR)*(1+taper));
bw = sqrt(SW*AR);

cht = .66;
cvt = 0.045;
%45% for Vertical tail
%48% for Horizontal tail
%looking at convential business jets, it looks similar to this
LHT = 0.48*Fl;
LVT = 0.45*Fl;
SVT = bw*SW*cvt/LVT;
SHT = cw*SW*cht/LHT;
end
%% V-n diagram
[rho_sl,~,~] = Standard_Atmosphere_IMPERIAL(2);
[rho_cr,~,~] = Standard_Atmosphere_IMPERIAL(Cruise_alt);
W       = BestOverallMTOW;
Vtas    = V_cruise;
sig     = rho_cr/rho_sl;
Vc      = Vtas*sqrt(sig);
Vmo     = 1.06*Vc;
Vd      = 1.07*Vmo;
n_as    = [1; 2.5];
Vsa     = sqrt(2*n_as.*W./(BestOverallS.*Cl_cruise.*rho_sl))/1.688;
Vs      = Vsa(1);
Va      = Vsa(2);

% Stall curves
n_up = linspace(0,2.5,100);
n_dn = linspace(0,-1,100);
V_up     = sqrt(2*n_up.*W./(BestOverallS.*Cl_cruise.*rho_sl))/1.688;
V_dn     = sqrt(2*n_dn.*W./(BestOverallS.*Clmin_cruise.*rho_sl))/1.688;
n_s_l    = (rho_sl.*(Vs*1.688).^2.*Clmin_cruise)./(2.*W./BestOverallS);
figure(1)
hold on
plot(V_up,n_up,V_dn,n_dn)
plot([Va,Vd],[2.5,2.5],[Vd,Vd],[2.5,0],[Vd,Vc],[0,-1],[Vc,V_dn(100)],[-1,-1],[Vs,Vs],[1,n_s_l])
title('Flight Envelope at 20,000 ft MTOW','FontSize',16)
xlabel('Air Speed (knots)','FontSize',14)
ylabel('Loading','FontSize',14)

% Gust lines
c_root  = 2.*BestOverallS./(sqrt(BestOverallS.*AR).*(1+taper));
c       = (2/3)*c_root*(1+taper + taper^2)/(1+taper);
g       = 32.174;
beta    = sqrt(1-M^2);
CLa     = 2*pi*AR/(2+sqrt(AR.^2*(beta/0.97)^2*(1+(tan(sweep)^2)/beta^2)+4));
mug     = 2*W/BestOverallS/(rho_sl.*c.*CLa.*g);
Kg      = 0.88*mug/(5.3+mug);
Ub      = 66;
A       = rho_sl.*Cl_cruise/(2.*W/BestOverallS);
B       = Kg.*CLa.*Ub./(498.*W./BestOverallS);
Vb      = (B+sqrt(B^2+4.*A.*1.688^2))/(2.*1.688^2.*A);
Vgust   = [Vb;Vc;Vd];
Ue      = [66; 50; 25];

ngust_up = 1 + Kg.*CLa.*Ue.*Vgust./(498.*W./BestOverallS);
ngust_dn = 1 - Kg.*CLa.*Ue.*Vgust./(498.*W./BestOverallS);
plot(Vgust,ngust_up,Vgust,ngust_dn)

W       = BestOverallEmpty;
nlim    = 2.1 + 24000/(W+10000);
n_as    = [1; nlim];
Vsa     = sqrt(2*n_as.*W./(BestOverallS.*Cl_cruise.*rho_sl))/1.688;
Vs      = Vsa(1);
Va      = Vsa(2);

% Stall curves
V_up    = sqrt(2*n_up.*W./(BestOverallS.*Cl_cruise.*rho_sl))/1.688;
V_dn    = sqrt(2*n_dn.*W./(BestOverallS.*Clmin_cruise.*rho_sl))/1.688;
n_s_l   = (rho_sl.*(Vs*1.688).^2.*Clmin_cruise)./(2.*W./BestOverallS);
figure(2)
hold on
plot(V_up,n_up,V_dn,n_dn)
plot([Va,Vd],[2.5,2.5],[Vd,Vd],[2.5,0],[Vd,Vc],[0,-1],[Vc,V_dn(100)],[-1,-1],[Vs,Vs],[1,n_s_l])


% Gust lines
mug     = 2*W/BestOverallS/(rho_sl.*c.*CLa.*g);
Kg      = 0.88*mug/(5.3+mug);
A       = rho_sl.*Cl_cruise/(2.*W/BestOverallS);
B       = Kg.*CLa.*Ub/(498.*W./BestOverallS);
Vb      = (B+sqrt(B^2+4.*A.*1.688^2))/(2.*1.688^2.*A);
Vgust   = [Vb;Vc;Vd];

ngust_up = 1 + Kg.*CLa.*Ue./(498.*W./BestOverallS).*Vgust;
ngust_dn = 1 - Kg.*CLa.*Ue./(498.*W./BestOverallS).*Vgust;
plot(Vgust,ngust_up,Vgust,ngust_dn)
title('Flight Envelope at 20,000 ft Empty','FontSize',16)
xlabel('Air Speed (knots)','FontSize',14)
ylabel('Loading','FontSize',14)
end 
